[train] #train parameters训练用参数
# 训练的轮数
epoch = 16
# 训练时一次计算的数据量
batch_size = 128
# 是否需要随机打乱数据
shuffle = True
# 多少个进程处理数据
reader_num = 8
# 选择的优化器
optimizer = adam
# 学习率
learning_rate = 1e-3
# 权值正则化参数
weight_decay = 0
# 学习率每过step_size个epoch变为原来的lr_multiplier倍
step_size = 1
lr_multiplier = 1

[eval] #eval parameters测试用参数
batch_size = 128

shuffle = False

reader_num = 4

[distributed] #多卡参数
# 是否使用DistributedDataParallel
use = False
# use为true时生效
backend = nccl

[data] #data parameters 数据用参数
# 数据读取器类型
train_dataset_type = FilenameOnly
# 数据处理器类型
train_formatter_type = Basic
# 数据位置
train_data_path = data
# 即真正的数据地址应该是train_data_path+train_file_list
train_file_list = train.json

valid_dataset_type = FilenameOnly
valid_formatter_type = Basic
valid_data_path = data
valid_file_list = valid.json

test_dataset_type = FilenameOnly
test_formatter_type = Basic
test_data_path = data
test_file_list = test.json

# 是否提前把数据加载到内存 仅用于JsonFromFiles
load_into_mem = True

[model] #model parameters # 模型用参数
# 训练的模型类型
model_name = BasicBert

[output] #output parameters # 输出用参数
# 多少次运行模型后输出一次结果
output_time = 1
# 每多少个epoch进行一次验证
test_time = 1

# 模型结果文件保存地址
model_path = model
# 模型保存的名字
model_name = name

# 计算模型好坏程度的指标函数
accuracy_method = SingleLabelTop1
# 用来产生中间指标输出的函数
output_function = Basic
# 用来选择要输出的指标
output_value = micro_precision,macro_precision,macro_recall,macro_f1
